apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

// Configuration React Native manuelle
react {
    entryFile = file(["node", "-e", "console.log(require('react-native/local-cli/core/constants').entryPoint);"].execute(null, rootDir).text.trim())
    root = file("../../")
    reactNativeDir = file("$rootDir/../node_modules/react-native")
    codegenDir = file("$rootDir/../node_modules/@react-native/codegen")
    cliFile = file("$rootDir/../node_modules/react-native/cli.js")
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace 'com.ravilimita.monapp'
    defaultConfig {
        applicationId 'com.ravilimita.monapp'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.0.0")

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")

    def isGifEnabled = (findProperty('react.enableGif') ?: "true").toBoolean()
    def isWebpEnabled = (findProperty('react.enableWebp') ?: "true").toBoolean()
    def isFrescoEnabled = (findProperty('react.enableFresco') ?: "true").toBoolean()
    def isHermesEnabled = (findProperty('react.enableHermes') ?: "true").toBoolean()

    if (isHermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    if (isFrescoEnabled) {
        implementation("com.facebook.fresco:fresco:${FRESCO_VERSION}")
        if (isGifEnabled) {
            implementation("com.facebook.fresco:animated-gif:${FRESCO_VERSION}")
        }
        if (isWebpEnabled) {
            implementation("com.facebook.fresco:webpsupport:${FRESCO_VERSION}")
            if (isGifEnabled) {
                implementation("com.facebook.fresco:animated-webp:${FRESCO_VERSION}")
            }
        }
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

// Configuration pour résoudre les problèmes de dépendances
configurations.all {
    resolutionStrategy {
        force "com.facebook.react:react-android:0.74.0" // Remplacez par votre version React Native
    }
}